#+title: 第十二章 正则表达式与文件格式化处理

* 正则表达式简介

正则表达式就是处理字符串的方法，通过一些特殊符号来达到搜索/删除/取代某特定字符等目的。

常用与系统管理，过滤邮件等功能。

正则表达式分为基础表达式和扩展表达式。

* 基础正则表达式


** 语系对正则表达式的影响
使用正则表达式时，要特别注意系统环境的语系，否则可能出现意想不到的结果。

基础正则表达式的特殊符号:

| 特殊符号  | 代表意义                                                 |
|-----------+----------------------------------------------------------|
| [:alnum:] | 代表英文大小写字节及数字，即 0-9，A-Z，a-z               |
| [:alpha:] | 代表任何英文大小写字节,即 A-Z,a-z                        |
| [:blank:] | 代表空白键与 Tab 这两个键                                |
| [:cntrl:] | 代表键盘上面的控制按键，包括 CR,LF,Tab,Del..等等         |
| [:digit:] | 代表数字 0-9                                             |
| [:graph:] | 除了空白字节（空白键及 Tab键）外的其他所有按键           |
| [:lower:] | 代表小写字节，即 a-z                                     |
| [:print:] | 代表任何可以被打印出来的字节                             |
| [:punct:] | 代表标点符号(punctuation symbol),即 " ' ? ! ; : # $ 等等 |
| [:upper:] | 代表大写字节，即 A-Z                                     |
| [:space:] | 任何会产生空白的字节，包括空白键 Tab CR 等等             |
| [:xdigit:] | 代表16进制的数字类型，包括 0-9，A-F，a-f的数字与字节                         |

** grep的一些进阶选项

| 参数         | 备注                                                                         |
|--------------+------------------------------------------------------------------------------|
| -A           | 后面可加数字，为 after 的意思，除了列出这一行之外，后续的 n 行也列出来       |
| -B           | 后面可以加数字， 为 bofore 的意思，除了列出这一行之外，前面的 n 行也会列出来 |
| --color=auto | 将正确截取的那个数据里列出颜色                                                              |

** 基础正则表达式联系


*** 搜寻特定字符串

#+BEGIN_SRC shell
    grep -n 'the' test.txt
#+END_SRC

*** 利用中括号 [] 来搜索集合字节
利用中括号来搜索出 test 和 taste 这两个单词。

#+BEGIN_SRC shell
   grep -n 't[ae]st' test.txt
#+END_SRC

*** 行首与行尾字节 ^ $

某个字符只在行首出现：

#+BEGIN_SRC shell
  grep -n '^the' test.txt
#+END_SRC

行尾结束为小数点的行：

#+BEGIN_SRC shell
  grep -n '\.$' test.txt
#+END_SRC

寻找出空白行：

#+BEGIN_SRC shell
  grep -n '^$' test.txt
#+END_SRC

任意一个字节 . 与重复字节 *:

 + . : 代表一定有一个任意字节的意思
 + * : 代表 重复钱一个字节， 0 到无穷多次 的意思，是组合形态

找出一个 g??d 四个字节的字符：

#+BEGIN_SRC shell
   grep -n 'g..d' test.txt
#+END_SRC

至少有两个 o 以上的字符串：

#+BEGIN_SRC shell
  grep -n 'ooo*' test.txt
#+END_SRC


限定连续 RE 字符范围 {}

因为 { } 这两个符号在 shell 中有特殊的含义，因此必须使用转义字符。

找到两个 o 的字符串:

#+BEGIN_SRC shell
   grep -n 'o\{2,2\}' test.txt
#+END_SRC

后面一个表示的是范围，表示找出有两个 o 的字符串。


** sed 工具

sed 本身也是一个管道命令，可以分析 standard input，而且 sed 还可以用来对数据进行替换，删除，新增，截取等功能。

| 参数 | 备注                                                                                                           |
|------+----------------------------------------------------------------------------------------------------------------|
| -n   | 使用安静模式，sed 默认将 STDIN 的数据都会列到屏幕上，加上 -n 后，只有经过 sed 特殊处理的那一行才会在屏幕上显示 |
| -e   | 直接在命令行模式上进行 sed 的动作编辑                                                                          |
| -f   | 直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作                                |
| -r   | sed 的动作支持的扩展型正则表达式，模式是支持基本的正则表达式                                                   |
| -i   | 直接诶修改读取的文件内容，而不是由屏幕输出                                                                                          |

注: sed 后面所接的动作需要两个单引号包起来。

*** 以行为单位的新增/删除功能

以下的命令表示删除文件的 2到5行：

#+BEGIN_SRC shell
  nl /etc/passwd | sed '2,5d'
#+END_SRC


在原来的文本上的二行添加文本：

#+BEGIN_SRC shell
  nl /etc/passwd | sed '2a test'
#+END_SRC


*** 以行为单位的替换和显示功能

替换原来的第二到第五行：

#+BEGIN_SRC shell
  nl /etc/passwd | sed '2,5c test'
#+END_SRC

显示文件中的 5-7 行:

#+BEGIN_SRC shell
   nl /etc/passwd | sed -n '5,7p'
#+END_SRC


*** 部分数据的搜索以及替换功能

#+BEGIN_SRC shell
  sed 's/要被取代的字符/新的字符/g'
#+END_SRC


*** 直接修改文件内容(危险动作)
利用 sed 将 test.txt 内没一行结尾的 . 换成 ！

#+BEGIN_SRC shell
   sed -i 's/\.$/\!/g' test.txt
#+END_SRC
