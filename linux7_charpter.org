#+title:第七章 Linux文件与目录管理
#+author:lemon
#+date:<2016-03-11 Fri>

* 目录与路径

** 相对路径与绝对路径
   + 绝对路径： 一定从根目录写起，正确度会更好（shell脚本应该使用绝对路径）。
   + 相对路径: 不是从根目录写起，写起来更灵活，适应性更强。

** 目录相关操作
   特殊的目录：
   | 目录     | 意义                 |
   |----------+----------------------|
   | .        | 代表这一层的目录(根目录的 . 与 .. 是同一个目录) |
   | ..       | 代表上一层           |
   | -        | 代表前一个工作目录   |
   | ~        | 当前用户的 home 目录 |
   | ~account | account用户的 home 目录   |

*** cd
    cd (change directory),切换工作目录。

*** pwd
    pwd(print working directory)，显示当前所在目录，通过 -P 来查看完整的路径。

*** mkdir
    mkdir (make directory),一般情况下，目录只能一层一层建，但是加上 -p 之后，就可以一次创建多个目录:
    #+BEGIN_SRC shell
       mkdir -p /test1/test2/test3
    #+END_SRC

    可以利用 -m 来为创建的目录给予一个初始的权限。

*** rmdir
    目录只能一个个删，被删除的目录里面必定不能存在其他的目录或者文件，可以通过 -p 来删除上一级目录。
    #+BEGIN_SRC shell
       rmdir -p test1/test2/test3/test4
    #+END_SRC

** Linux 的路径变量 $PATH
   $PATH 可以让一些命令在全局环境下可以执行。
   可以通过 echo $PATH 来查看那些目录被加入到了环境变量中:

   #+BEGIN_SRC shell
     echo $PATH
   #+END_SRC

   没有在环境变量中的命令，也可以通过绝对路径来使用。

   注：
   + 不同身份使用的默认的 PATH 不同，能够默认运行的命令也不同
   + PATH 是可以修改的
   + 本目录(.)最好不要放到PATH中

* 文件与目录管理

** 文件与目录管理


*** 文件与目录检视: ls
    ls 用来查看浏览文件夹,ls有很多不同的参数，常见的参数如下:

    | 参数           | 意义                                                                                                       |
    |----------------+------------------------------------------------------------------------------------------------------------|
    | -a             | 查看全部的文件，连同隐藏文档                                                                               |
    | -A             | 全部的文件，连同隐藏文档，但是不包括 . 和 .. 这两个目录                                                    |
    | -d             | 仅列出目录本身，而不是列出目录内的文件数据                                                                 |
    | -f             | 直接列出结果，而不进行排序(ls 默认会对结果进行排序)                                                        |
    | -F             | 根据文件、目录等资讯，给予附加的数据结构 ,例如: *: 代表可运行档，/: 代表目录 =:代表socket l:代表 FIFO 文件 |
    | -h             | 将文件的容量以人类易读的方式展示出来                                                                       |
    | -i             | 列出 inode 号码                                                                                            |
    | -n             | 流出 UID 与 GID                                                                                            |
    | -r             | 将排序结果反序输出                                                                                         |
    | -R             | 连同子目录内容一起列出来，该目录下所有的文件都会列出来                                                     |
    | -S             | 以文件容量大小排序，而不是用档名排序                                                                       |
    | -t             | 依时间排序                                                                                                 |
    | --color=nerver | 不依据文件给不同的颜色显示                                                                                 |
    | --color=always | 显示颜色                                                                                                   |
    | --color=auto   | 让系统自行判断是否需要按颜色显示                                                                           |
    | --full-time    | 以完整的时间模式输出                                                                                                 |

*** 复制，删除与移动

    cp(复制文件和目录):
    | 参数 | 意义                                                               |
    |------+--------------------------------------------------------------------|
    | -a   | 相当于 -pdr 的意思                                                 |
    | -d   | 若来源为连接档的属性，则复制连接档属性，而非文件本身               |
    | -f   | 强制复制的意思，若目标文件已经存在且无法开启，则移除之后再尝试一次 |
    | -i   | 若目标文件已经存在，在覆盖时会询问动作的进行                       |
    | -l   | 进行硬式连接的连接档创建，而非复制文件本身                         |
    | -p   | 连同文件的属性一起复制过去                                         |
    | -r   | 递归持续复制                                                       |
    | -s   | 复制成符号连接档                                                   |
    | -u   | 若目标文件比源文件旧才覆盖                                                      |

    rm(删除文件或者目录):

    | 参数 | 意义                               |
    |------+------------------------------------|
    | -f   | 强制删除                           |
    | -i   | 在删除前有提示信息询问是否确认删除 |
    | -r   | 递归删除                               |

    mv(移动文件与目录，或者更名)

    | 参数 | 意义                                         |
    |------+----------------------------------------------|
    | -f   | 强制移动，如果目标文件存在，不会询问直接覆盖 |
    | -i   | 若目标文件存在，就会询问是否覆盖             |
    | -u   | 若目标文件存在，而且 source 比较新时才覆盖                    |

** 取得路径的文件名称与目录名称

   取得文件名:
   #+BEGIN_SRC shell
      basename /etc/sysconfig/network  # network
   #+END_SRC

   取得目录名:
   #+BEGIN_SRC shell
      dirname /etc/sysconfig/network  # /etc/sysconfig
   #+END_SRC

* 文件内容查询
  常见的内容查看命令:

  | 命令 | 意义                               |
  |------+------------------------------------|
  | cat  | 由第一行开始显示文件内容           |
  | tac  | 从最后一行开始显示内容             |
  | nl   | 显示内容的时候，顺便显示行号       |
  | more | 一页一页的显示文件内容             |
  | less | 与 more 类似，但是这个可以往前翻页 |
  | head | 只看头几行                         |
  | tail | 之后后几行                         |
  | od   | 以二进位的方式读取文件内容                      |

** 直接查看文件内容
    + cat(concatenate),将内容连续的显示在屏幕上，如果带上-n 或者-b，在每一行的前面还会带上行号。
    + tac 最后一行的内容会最先展示在屏幕上。
    + nl，可以显示行号

 ** 翻页显示内容
    + more 一页一页的显示。（空格表示向下翻页，Enter 表示向下翻一行，q 离开）
    + less 一页一页的显示。（与more相似，但是可以前后翻页）

 ** 数据截取
    + head 取出前面的几行
      显示前20行：
      #+BEGIN_SRC shell
          head -n 20 filename
      #+END_SRC

      后100行的数据不打印：
      #+BEGIN_SRC shell
          head -n -100 filename
      #+END_SRC

    + tail 取出后面几行

      默认取10行，取出最后20行
      #+BEGIN_SRC shell
         tail -n 20 filename
      #+END_SRC

      列出文件100以后的数据:
      #+BEGIN_SRC shell
         tail -n +100 filename
      #+END_SRC

 ** od 读取非文本文件
    od可以将二进制的文件转化成 ASCII 表示。

 ** touch 创建文件以及修改文件时间属性

    文件有三个主要的时间属性:

    | 参数  | 意义                                       | 命令                    |
    |-------+--------------------------------------------+-------------------------|
    | mtime | 文件内容有变化时，这个时间属性会变化       | ls -l file              |
    | ctime | 文件的权限和属性被修改时，将会更新这个时间 | ls -l --time=ctime file |
    | atime | 改文件被读取的时候，将会更新这个时间属性   | ls -l --time=ctime file |


    touch 主要作用:
    + 创建一个空的文件
    + 将某个文件的日期修订为目前(mtime与atime),ctime在文件属性(不能被复制)被修改的时候会自动记录目前的时间，所以touch改变不了这个时间.

    | 参数 | 意义                                        |
    |------+---------------------------------------------|
    | -a   | 修改 atime                                  |
    | -c   | 修改文件的时间，文件不存在则不会创建新文件  |
    | -d   | 后面接欲修订的日期,也可以使用 --date='日期' |
    | -m   | 仅修改 mtime                                |
    | -t   | 后面接欲修订的时间而不用目前的时间,格式为 [YYMMDDhhmm]          |
* 文件欲目录的默认权限与隐藏权限
   在 linux 的文件系统中，除了基本的 r、w、x权限之外，我们还可以通过 chattr 命令来配置其他的系统隐藏属性，可以使用 lsattr
   来查看这些属性。

 ** 文件默认权限 umask
    umask 指定目前使用者在创建文件或者目录时候的权限默认值。
    在任意文件夹下执行 umask:
    #+BEGIN_SRC shell
        umask # 0022 第一个数字表示特殊权限，后面三个数字表示一般权限。
    #+END_SRC

    022 实际表示的是该默认值需要减掉的权限：
    + 对文件来说， 默认完整权限为 -rw-rw-rw, umask 为0022，创建的文件的默认权限应该是 -rw-r--r--
    + 对文件夹来说，默认完整权限为 drwxrwxrwx, umask 为0022，创建的文件夹的默认权限应该是 drwx-r-x-r-x

    umask 还有一种更适合理解的表现方法:
    #+BEGIN_SRC shell
       umask -S # u=rwx,g=rx,o=rx
    #+END_SRC

 *** umask 的重要性
     在多人对同一个一目录内的文件进行操作时，如果 umask 的值还是0022，那么每个用户创建出来的文件都只有自己可以编辑，同组的其他用户就没有
  办法编辑别人创建的文件。

 ** 文件隐藏属性
    + chattr
      该命令可以修改文件的隐藏属性，最常用的为下面两个:

      i参数
      #+BEGIN_SRC shell
          chattr +i file # 让该文件无法被更改（root 权限也不行）
      #+END_SRC

      a参数
      #+BEGIN_SRC shell
          chattr +a file # 让一个文件只能呢个添加新的内容，而不能修改旧的内容或者删除数据
      #+END_SRC

    + lsattr
      用来查看文件的隐藏属性

 *** 文件的特殊权限: SUID,SGID,SBIT

     + set UID
       - SUID 权限仅对二进制程序有效
       - 运行者对于该程序需要有 x 可运行权限
       - 本权限仅在程序运行的过程中有效
       - 运行者将具有搞程序拥有者的权限
     + set GID
       SGID 可以对文件或者目录来运行，对文件来说，有如下的功能：
       - SGID 对二进制程序有效
       - 程序运行者对于该程序需要有 x 权限
       - 运行者在运行的过程中将会获得该程序群组的支持

       对于目录来说，有如下的功能:
       - 使用者对于该目录有 r 和 x 的权限时，该使用者可以进入次目录

       - 使用者在此目录下的有效群组将会编程该目录的群组

       - 若使用者在此目录下具有 w 的权限，则使用者创建的新文件的群组与此目录的群组相同。
     + sticky Bit
       SBIT 目前只对目录有效：
       - 档使用者对于此目录具有 w，x 权限时，在此目录下创建文件或者目录时，仅有自己与 root 才有权利删除该文件。

 *** SUID/SGID/SBIT 权限配置

     者三个权限也分别可以使用数字来替代: SUID 为 4， SGID 为 2， SBIT 为 1。若要配置权限，则在之前的基础上加上权限对应的数字：
     #+BEGIN_SRC shell
        chmod 4755 file
     #+END_SRC

     也可以使用符号来操作：
      + SUID u+s
      + SGID g+s
      + SBIT o+t

 ** 查看文件类型
    可以使用 file 来查看文件类型：
    #+BEGIN_SRC shell
       file filename
    #+END_SRC
* 命令与文件搜寻
   搜索在 linux 系统中是一个很常见的操作。linux中搜索有诸多的命令，而且每个命令的用法也不一样。

** 命令文档的搜索

    * which
      which命令会根据当前用户的 PATH 内的目录去搜索可运行文件。不同的用户的搜索结果是不一样的。

** 文件的搜索

     在以下的三个命令中，whereis， locate 的搜索速度要比 find 快很多，因为 前两个命令搜索的是 /var/lib/mlocate 中的数据。而不用直接去
     硬盘中读取数据。这个数据库每天由系统自动更新一遍，所以会导致一些新创建的文件没有办法立马搜索到。也可以手动更新数据库:

     #+BEGIN_SRC shell

     #+END_SRC

     + whereis
       这个命令与当前用户无关，只要是存在与系统中的，这个命令就可以找到
       | 参数 | 意义                                 |
       |------+--------------------------------------|
       | -b   | 寻找 binary 格式的文件               |
       | -m   | 只寻找在说明文档 manual 路径下的文件 |
       | -s   | 只找 source 来源文件                 |
       | -u   | 搜寻不在上述三个选项当中的其他特殊文件                  |
     + locate
       这个命令的作用与 whereis 的效果类似。

       | 参数 | 意义             |
       |------+------------------|
       | -i   | 忽略大小写的差异 |
       | -r   | 后面可接正规表示法的显示方法   |
     + find

       find 有很多的用法，大致上可以分为以下的三类:

       + 与时间相关
         | 参数        | 意义                                             |
         |-------------+--------------------------------------------------|
         | -mtime n    | 查找在 n 天之前的 一天之内被修改过内容的文件     |
         | -mtime +n   | 查找在 n 天之前(不含 n 天本身)被修改过内容的文件 |
         | -mtime -n   | 查找在 n 天之内(含n天本身)被修改过内容的文件     |
         | -newer file | 查找出比 file 还要新的文件名                                |

         #+BEGIN_SRC shell
            find / -mtime 0  # 0代表的是目前的时间
         #+END_SRC

         #+BEGIN_SRC shell
            find /ect -newer /etc/passwd
         #+END_SRC

       + 与使用者或者群组名称有关的参数

         | 参数        | 意义                                         |
         |-------------+----------------------------------------------|
         | -uid n      | n 是数字，是当前使用者的id，也就是 UID       |
         | -gid n      | n 是数字，这个数字是群组名称的 id 也就是 GID |
         | -user name  | name 是用户的名称                            |
         | -group name | name 是群组的名称                            |
         | -nouser     | 寻找文件的拥有者不存在 /etc/passwd 的人      |
         | -nogroup    | 寻找文件的拥有群组不存在与 /etc/group 中的文件                |

         #+BEGIN_SRC shell
            find /home -user vbird
         #+END_SRC

         #+BEGIN_SRC shell
            find / -nouser
         #+END_SRC

       + 与文件权限及名称有关的参数

         | 参数           | 意义                                                                                                      |
         |----------------+-----------------------------------------------------------------------------------------------------------|
         | -name filename | 搜索文件名为 filename 的文件                                                                              |
         | -size [+-]SIZE | 搜索比SIZE还要大(+)或小(-)的文件， c 表示 byte， k 代表 1024 bytes                                        |
         | -type TYPE     | 搜索文件类型为 TYPE 的文件， 一般有 f(正规文件)， b，c(配置文件), d(目录), l(连结文件) s(socket), p(FIFO) |
         | -perm mode     | 搜索文件权限 刚好为 mode 的文件，这个 mode 是文件权限数值，类似 -rwsr-xr-x 4755.                          |
         | -perm -mode    | 搜索文件权限必须包括 mode 的文件                                                                          |
         | -perm +mode    | 搜索文件权限包含任意 mode 的文件                                                                                       |

         #+BEGIN_SRC shell
            find / -name passwd
         #+END_SRC

         #+BEGIN_SRC shell
            find /var -type s
         #+END_SRC

         #+BEGIN_SRC shell
            find / -perm +7000
         #+END_SRC

* 权限与命令间的关系

** 使当前用户可以进入某目录成为可工作命令的基本权限

   + 可使用的命令： cd 等基本切换命令的命令
   + 目录所需权限： 当前用户至少对这个目录有 x 的权限
   + 额外权限：如果当前用户需要在这个目录中使用 ls 命令，还至少需要 r 的权限。

** 当前用户在某个命令内读取一个文件的基本权限

   + 可使用的命令： vi，cat，more 等基本的文件查看工具
   + 目录所需权限： 当前用户至少需要有 x 的权限
   + 文件所需权限： 当前用户对这个文件至少有 r 的权限

** 当前用户修改一个文件的基本权限
   + 可使用的命令：vi， nano 等文件编辑器
   + 目录所需权限：当前用户至少需要有 x 权限
   + 文件所需权限：当前用户对文件至少需要有 r w 的权限

** 当前用户可以创建一个文件的基本权限

   + 目录所需权限： 当前用户在该目录至少具有 w，x的权限。

** 当前用户进入某个目录并运行该目录下的某个命令的基本权限
   + 目录所需权限： 当前用户至少具有 x 的权限
   + 文件所需权限： 当前用户对该文件至少写具有 x 的权限
