#+title:第十三章 学习 Shell Scripts
#+author:lemon
#+date:<2016-03-31 Thu>


* 什么是 Sehll Scripts

shell scripts 其实就是利用 shell 的功能所写的一个程序，这个程序是一个纯文本文件，将一些 shell 的语法与命令（含外部命令）写在里面，
搭配正则表达式、管道命令、与数据重定向等功能，以达到我们所想要处理的目的。


** 学习 shell script 的必须性

*** 自动化管理

*** 追踪与管理系统

*** 简单的入侵侦测功能

*** 连续命令单一化

*** 简单的数据处理

*** 跨平台学习时间短

** 第一个 script 程序

在 script 中，要注意以下事项：
  + 命令是从上而下，从左到右的分析与运行
  + 命令，选项与参数之间的多个空白都会被忽略
  + 空白行也会被忽略，并且 tab 键所占的空间同样被当作是空白键
  + 如果读取到一个 Enter 符号，就会尝试开始运行该行（或该串）的命令
  + 如果一行的内容太多，可以使用 \Enter 来将命令延伸到另一行
  + 使用 # 来作为注释符号



脚本通过以下的方法来运行：

  + 直接下达命令：脚本必须要有可读和可运行的权限
  + 以 bash 程序来运行

脚本编写流程：

  + 第一行声明这个脚本使用的 bash 名称，例如 #!/bin/bash
  + 程序内容的说明，除了第一行的 #! 之外，其他的 # 都是注释。程序说明使用注释来说明
  + 主要环境变量的说明：建议在 script 中配置好环境变量，这样的话很多的程序就可以直接调用了
  + 程序的主体
  + 程序的返回值: 使用 exit 来返回


编写脚本的良好习惯，在脚本的开始应该记录以下的信息:
  + script 的功能
  + script 的版本信息
  + script 的作者与联络方式
  + script 的版权宣告
  + script 的历史信息
  + script 内的特殊命令，使用绝对路径来下达
  + script 运行时所需要的环境表露需要进行声明与配置


* 简单的 shell 练习

** 简单例子

*** 交互式脚本

让用户输入变量，以下的例子是用户输入姓名：

#+BEGIN_SRC shell
#!/bin/bash
# Program:
#	User inputs his first name and last name.  Program shows his full name.
# History:
# 2005/08/23	VBird	First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

read -p "Please input your first name: " firstname  # 提示使用者输入
read -p "Please input your last name:  " lastname   # 提示使用者输入
echo -e "\nYour full name is: $firstname $lastname" # 结果由萤幕输出


*** 随日期变化来创建文件

随时间的不同而创建文件，类似与日志文件的创建:

#+BEGIN_SRC shell
#!/bin/bash
# Program:
#	Program creates three files, which named by user's input
#	and date command.
# History:
# 2005/08/23	VBird	First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# 1. 让使用者输入文件名称，并取得 fileuser 这个变量；
echo -e "I will use 'touch' command to create 3 files." # 纯粹显示资讯
read -p "Please input your filename: " fileuser         # 提示使用者输入

# 2. 为了避免使用者随意按 Enter ，利用变量功能分析档名是否有配置？
filename=${fileuser:-"filename"}           # 开始判断有否配置档名

# 3. 开始利用 date 命令来取得所需要的档名了；
date1=$(date --date='2 days ago' +%Y%m%d)  # 前两天的日期
date2=$(date --date='1 days ago' +%Y%m%d)  # 前一天的日期
date3=$(date +%Y%m%d)                      # 今天的日期
file1=${filename}${date1}                  # 底下三行在配置档名
file2=${filename}${date2}
file3=${filename}${date3}

# 4. 将档名创建吧！
touch "$file1"                             # 底下三行在创建文件
touch "$file2"
touch "$file3"
#+END_SRC


数值运算：

#+BEGIN_SRC shell

#!/bin/bash
# Program:
#	User inputs 2 integer numbers; program will cross these two numbers.
# History:
# 2005/08/23	VBird	First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
echo -e "You SHOULD input 2 numbers, I will cross them! \n"
read -p "first number:  " firstnu
read -p "second number: " secnu
total=$(($firstnu*$secnu))
echo -e "\nThe result of $firstnu x $secnu is ==> $total"

#+END_SRC


script 的运行方式的差异：

+ 直接运行 script ：这种方法下，系统会用一个子进程来运行脚本，脚本里面所有的变量在运行完了之后就会被销毁。
+ 利用 source 来运行脚本，这种方式是直接在父进程中运行脚本，这时脚本中所有的变量都会在 bash 中起作用

* 使用判断

** 使用 test 来进行条件判断

测试 test 文件夹是否存在：

  #+BEGIN_SRC shell
     test -e /test && echo "exist" || echo "Not exist"
  #+END_SRC


 | 参数              | 代表意义                                                                                   |
 |-------------------+--------------------------------------------------------------------------------------------|
 | -e                | 文档时候存在                                                                               |
 | -f                | 文档是否存在而且类型为文件(file)                                                           |
 | -d                | 该文档是否存在且是目录(directory)                                                          |
 | -b                | 该文档是否存在且为 block device                                                            |
 | -c                | 该文档是否存在且为 character device                                                        |
 | -S                | 该文档是否存在且为一个 Socket 文件                                                         |
 | -p                | 该文档是否存在且为一个 FIFO 文件                                                           |
 | -L                | 该文档是否存在且为一个 链接档                                                              |
 | -r                | 检测该文档是否存在且具有可读权限                                                           |
 | -w                | 检测该文档是否存在且具有可写权限                                                           |
 | -x                | 检测该文档是否存在且具有可运行权限                                                         |
 | -u                | 检测该文档是否存在且具有suid 权限                                                          |
 | -g                | 检测该文档是否存在且具有sgid 权限                                                          |
 | -k                | 检测该文档是否存在且具有 sticky bit 权限                                                   |
 | -s                | 检测该文档是否存在且为空白文件                                                             |
 | -nt               | 判断 file1 是否比 file2 新                                                                 |
 | -ot               | 判断 file1 是否比 file2 旧                                                                 |
 | -ef               | 判断 file1 与 file2 是否为同一文件，主要判断两个文件是否都指向同一个 inode                 |
 | -eq               | 两个数值相等， 例如 n1 -eq n2                                                              |
 | -ne               | 两个数值不相等                                                                             |
 | -gt               | n1 大于 n2                                                                                 |
 | -lt               | n1 小于 n2                                                                                 |
 | -ge               | n1 大于等于 n2                                                                             |
 | -le               | n1 小于等于 n2                                                                             |
 | test -z string    | 判断字符串是否为 0，若 string 为空字符串， 则为 true                                       |
 | test -z string    | 判断字符串是否非为 0， 若 string 为空字符串，则返回 false， -n 也可以省略                  |
 | test str1 = str2  | 判断 str1 是否等于 str2， 若相等，则返回 true                                              |
 | test str1 != str2 | 判断 str1 是否不等于 str2 ，若相等，则返回 false                                           |
 | -a                | and, 且 关系， 例如 test -r file -a -x file, 则 file 同时具有 r 与 x 的权限时，才返回 true |
 | -o                | or ，test -r file -o -x file2 ，则 file 具有 r 或者 w 权限时，就会返回 true                |
 | ！                | 取反， 如 test ! -x file, 当 file 不具有 x 时，返回 true                                               |

下面的脚本实现了以下的功能：

  1. 这个文件时候存在，若不存在就返回 "file does not exit"
  2. 若这个文件存在，就判断类型是文件还是目录， 返回 "file is regular file" 或者 "file is  directory"
  3. 判断一下，运行者的身份对这个文件所拥有的权限，

  #+BEGIN_SRC shell
     #!/bin/bash
# Program:
#	User input a filename, program will check the flowing:
#	1.) exist? 2.) file/directory? 3.) file permissions
# History:
# 2005/08/25	VBird	First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# 1. 让使用者输入档名，并且判断使用者是否真的有输入字串？
echo -e "Please input a filename, I will check the filename's type and \
permission. \n\n"
read -p "Input a filename : " filename
test -z $filename && echo "You MUST input a filename." && exit 0
# 2. 判断文件是否存在？若不存在则显示信息并结束脚本
test ! -e $filename && echo "The filename '$filename' DO NOT exist" && exit 0
# 3. 开始判断文件类型与属性
test -f $filename && filetype="regulare file"
test -d $filename && filetype="directory"
test -r $filename && perm="readable"
test -w $filename && perm="$perm writable"
test -x $filename && perm="$perm executable"
# 4. 开始输出资讯！
echo "The filename: $filename is a $filetype"
echo "And the permissions are : $perm"
  #+END_SRC

** 使用 [] 来进行判断

   使用 [] 注意事项：
   + 在中括号 [] 内的每个组件都需要空白键来分隔
   + 在中括号内的变量，最好都以双引号括起来
   + 在中括号内的常数，最好都以单或者双引号括起来

** Shell script 的默认变量($0, $1)

   运行脚本名称为 $0 这个变量， $1 对应第一个参数，以此类推。这些变量可以直接在脚本中调用:

   + $# : 代表后面所接的参数的个数，
   + $@ : 代表 ["$1" "$2" .....] 每个变量是独立的
   + $* : 代表 ["$1 $2...."] 默认以空白键隔开

*** shift 造成参数变量号码偏移

* 条件判断式

** 利用 if...then

*** 单层简单条件判断式

    #+BEGIN_SRC shell
      if [ 条件判断式 ]: then

      fi
    #+END_SRC

*** 多重，复杂条件判断
    #+BEGIN_SRC shell
     if [ 条件判断式 ]: then

     else

     fi
    #+END_SRC

    或者

    #+BEGIN_SRC shell
      if [ 条件判断式一 ] : then

      elis [ 条件判断式二 ] : then

      fi
    #+END_SRC

** 利用 case.....esac 判断

   #+BEGIN_SRC shell
      case $变量名称 in
          "第一个变量的名称" )

                 ;;
          "第二个变量的名称" )

                 ;;
           * )

                 ;;
      esac
   #+END_SRC

** 利用 function 功能

shell script 的运行方式是由上而下，由左至右，所以 script 的 function 一定要在程序的最前面。

#+BEGIN_SRC shell
   function fname() {

   }
#+END_SRC

 function 也是拥有内建变量的，与 shell script 很类似。
