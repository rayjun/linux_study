#+title: 第十三章 Linux 帐号管理与 ACL 权限配置
#+author: lemon
#+date:<2016-04-07 Thu>

* Linux 帐号与群组


** 使用者标识符: UID 与 GID

Linux 系统通过识别帐号的 ID 来识别登录者的身份，每个登录者都至少有两个 ID:

    + UID (User ID)
    + GID (Group ID)

** 使用者帐号

在远程登录系统的时候，在输入帐号密码之后，系统会帮我处理以下的事情:

    + 搜索 /etc/passwd, 与输入的帐号对比，如果有则将该帐号对应的 UID 与 GID (/etc/group 中) 读出来，还会将该帐号的 home 目录与
     shell 配置一并读出来。
    + 然后进入 /etc/shadow 文件中查找对应帐号的 UID，对比输入的密码。
    + 如果帐号和密码都没问题的话，就可以进入系统了


*** /etc/passwd 文件结构

这个文件中每一行都代表着一个帐号，有几行就代表有几个帐号在系统中：

以第一行为例:

   #+BEGIN_SRC shell
      root:x:0:0:root:/root:/bin/bash
   #+END_SRC
中间使用 : 隔开的7个部分代表着不同的含义：

| 列 | 含义                                                                                      |
|----+-------------------------------------------------------------------------------------------|
|  1 | 帐号名称                                                                                  |
|  2 | 密码，早期系统中密码都是放在这里，由于安全性的原因，后来将密码都移到了 /etc/shadow 文件中 |
|  3 | UID 0(系统管理员) 1-499(系统帐号) 500-65535 （可登录帐号）                                |
|  4 | GID                                                                                       |
|  5 | 用户信息说明                                                                              |
|  6 | home 目录                                                                                 |
|  7 | Shell 类型                                                                                  |


*** /etc/shadow 文件结构

这个文件的结构类似于 /etc/passwd 文件，使用 ： 隔开，有9列，每一列的含义如下:

| 列 | 含义                                   |
|----+----------------------------------------|
|  1 | 帐号名称                               |
|  2 | 密码(经过加密了)                       |
|  3 | 最近更改的密码的日期                   |
|  4 | 密码不能更改的天数                     |
|  5 | 密码需要重新更改的天数                 |
|  6 | 密码需要更改前的警告天数               |
|  7 | 密码过期后的帐号宽限时间(密码失效日期) |
|  8 | 帐号失效日期                           |
|  9 | 保留字段                                   |


** 关于群组： 有效与初始群组、groups、newgrp


*** /etc/group 文件结构

同样使用 : 分隔：

   #+BEGIN_SRC shell
      root:x:0:root
   #+END_SRC

| 列 | 意义     |
|----+----------|
|  1 | 组名     |
|  2 | 群组口令 |
|  3 | GID      |
|  4 | 此群组支持的帐号名称 |


*** 有效群组(effective group) 与初始群组(inital group)

用户在被创建的时候所赋予的 GID 就是初始群组，当一个用户加入到两个以上群组的时候，新建文件或者目录的时候新文件所以有效群组。


*** groups 有效与支持群组的观察

 groups 可以查看当前用户的支持群组，打印出来的第一个群组就是有效群组。

*** newgrp 有效群组的切换

  newgrp 可以在当前用户的支持群组里面切换有效群组。


*** /etc/gshadow

这个文件同样也被 : 分隔成了 4 列：

| 列 | 含义                                                |
|----+-----------------------------------------------------|
|  1 | 组名                                                |
|  2 | 密码，开头为 ! 表示没有合法的密码，所以没有群管理员 |
|  3 | 群组管理员的帐号                                    |
|  4 | 该群组的所属帐号                                            |

* 帐号管理

** 新增与移除用户: useradd, 相关配置文件，passwd, usermod, userdel

创建一个完整的用户需要用到 useradd 与 passwd 命令:

*** useradd

| 参数 | 意义                                                              |
|------+-------------------------------------------------------------------|
| -u   | 后面接的是 UID，是一组数组。直接指定一个特定的 UID 给这个帐号     |
| -g   | initial group 的 GID                                              |
| -G   | 后面的接的组名是这个帐号还可以加入的群组                          |
| -M   | 不创建用户 home 目录                                              |
| -m   | 创建用户 home 目录                                                |
| -c   | /etc/passwd 的第五列的备注，可以随便添加                          |
| -d   | 指定一个 home ml，而不使用系统默认的，务必使用绝对路径            |
| -r   | 创建一个系统的帐号，这个帐号的 UID 会有限制                       |
| -s   | 后面接一个 shell 的名称，没有指定则为 /bin/bash                   |
| -e   | 帐号失效的日的配置                                                |
| -f   | /etc/shadow 文件第7列，指令时候会失效，0为立刻失效， -1为永不失效 |

这个命令会绑我们完成以下的事情：

+ 在 /etc/passwd 文件中创建一行与帐号相关的数据，创建 UID/GID/home 目录等
+ 在 /etc/shadow 文件里面将口令的相关参数填进去，但是还没有密码
+ 在 /etc/group 文件中加一个与帐号名称一样的组名
+ 在 /home 底下创建一个与帐号同名的目录作为用户 home 目录，且权限为700

在创建完帐号之后，还需要使用 passwd 命令来完成帐号的创建。

*** passwd

| 参数   | 备注                                                            |
|--------+-----------------------------------------------------------------|
| -stdin | 可以透过来自目前一个管道的数据，作为密码的输入                  |
| -l     | 是 lock 的意思，会将 /etc/shadow 第二栏最前面加上 !, 使密码失效 |
| -u     | 与 -l 相对，是 unlock 的意思                                    |
| -S     | 列出密码相关参数，即 /etc/shadow 文件内的大部分信息             |
| -n     | 后面接天数，shadow 的第4个字段，多久不可修改密码的天数          |
| -x     | 后面接天数，shadow 的第5个字段，多久内必须要密码                |
| -w     | 后面接天数，shadow 的第6个字段，密码过期前的警告天数            |
| -i     | 后面接 日期，shadow 的第7个字段，密码失效日期                   |


*** chage

| 参数 | 备注                                                     |
|------+----------------------------------------------------------|
| -l   | 列出该帐号的详细密码参数                                 |
| -d   | 后面接日期，修改 shadow 第三字段(最近一次修改密码日期)   |
| -E   | 后面接日期，修改 shadow 的第八字段(帐号失效日)           |
| -I   | 后面接天数，修改 shadow 的第七字段(密码失效日期)         |
| -m   | 后面接天数，修改 shadow 的第四字段(密码最短保留天数)     |
| -M   | 后面接天数，修改 shadow 的第五字段(密码多久需要进行变更) |
| -W   | 后面接天数，修改 shadow 的第六字段(密码过期前警告日期)   |

*** usermod

| 参数 | 备注                                                                      |
|------+---------------------------------------------------------------------------|
| -c   | 后面接帐号的说明，即 /etc/passwd 的第五栏的说明栏，可以加入一些帐号的说明 |
| -d   | 后面接帐号的 home 目录，修改 /etc/passwd 的第六栏，                       |
| -e   | 后面接日期，/etc/shadow 文件内的第八个字段                                |
| -f   | 后面接天数，是 shadow 文件的第七个字段                                    |
| -g   | 后面接初始群组，修改 /etc/passwd 的第四个字段，即 GID 字段                |
| -G   | 后面接次要群组，修改这个用户能够支持的群组，修改 /etc/group               |
| -a   | 与 -G 合用，可 添加次要群组的支持，而非 [配置]                            |
| -l   | 后面接帐号名称，即修改帐号名称， /etc/passwd 的第一栏                     |
| -s   | 后面接 shell 的实际文件                                                   |
| -u   | 后面接 UID 数字，/etc/passwd 的第一栏                                     |
| -L   | 暂时将用户的密码冻结                                                      |
| -U   | 将 /etc/passwd 密码栏的 ！拿掉                                            |


*** userdel

+ 用户帐号/密码相关参数 /etc/passwd /etc/shadow
+ 使用者群组相关参数 /etc/group, /etc/gshadow
+ 用户个人文件数据 /home/username, /var/spool/mail/username

| 参数 | 备注 |
|------+------|
| -r   | 连同用户的 home 目录一起删除 |





** 用户功能

一般用户可以修改的信息

*** finger

| 参数 | 备注                                           |
|------+------------------------------------------------|
| -s   | 列出用户的帐号，全名，终端机代号与登录时间等等 |
| -m   | 列出与后面接的帐号相同者，而不是利用部分比对   |

*** chfn

| 参数 | 备注             |
|------+------------------|
| -f   | 后面接完整的名字 |
| -o   | 办公室的房间号   |
| -p   | 办公室的电话号码 |
| -h   | 家里的电话号码          |


*** chsh

change shell 的意思：

| 参数 | 备注                         |
|------+------------------------------|
| -l   | 列出目前系统上面可用的 shell |
| -s   | 配置自己的 Shell                  |



*** id

使用这个命令可以查询某人或者自己相关的 UID/GID 等信息。


** 新增与移除去群组


*** groupadd


| 参数 | 备注                                       |
|------+--------------------------------------------|
| -g   | 后面接某个特定的 GID，用来直接给予某个 GID |
| -r   | 创建系统群组啦                                    |


*** groupmod

| 参数 | 备注                |
|------+---------------------|
| -g   | 修改既有的 GID 数字 |
| -n   | 修改既有的组名             |


*** groupdel

删除群组:

#+BEGIN_SRC shell
  groupdel [groupname]
#+END_SRC

*** gpsswd 群组管理员功能

| 参数 | 备注                                                        |
|------+-------------------------------------------------------------|
|      | 若没有任何参数，表示给予 groupname 一个密码(系统管理员动作) |
| -A   | 将 groupname 的主控权交给后面的用户管理(系统管理员动作)     |
| -M   | 将某些帐号加入到这个群组当中(系统管理员动作)                |
| -r   | 将 groupname 的密码移除 (系统管理员动作)                    |
| -R   | 让 groupname 的密码栏失效  (系统管理员动作)                 |
| -a   | 将某位使用者加入到 groupname 这个群组当中 (群组管理员动作)  |
| -d   | 将某位使用者移除 groupname 这个群组当中 (群组管理员动作)    |


* 主机的权限规划 ACL 的使用

** 什么是 ACL

ACL 是 Access Control List 的缩写，主要的目的是在提供传统的 owner,group,others 的 read, write,execute 权限之外的权限配置。
ACL 可以针对单一用户，单一文件或者目录来进行 r, w, x 的权限规范，对于需要特殊权限的使用状况非常有帮助。


** 如何启动 ACL
大多数的 linux 的发行版本以及配置好了 ACL。

** ACL 的配置技巧 (getfacl, setfacl)
   + getfacl: 取得某个文件/目录的 ACL 配置项目
   + setfacl: 配置某个文件/目录的 ACL 规范

* 使用者身份切换

  linux 的日常使用习惯:
  + 使用一般帐号
  + 用较低的权限启动系统服务
  + 软件限制权限

** su
最简单的身份切换命令，但是需要 root 的密码。

** sudo
只有 /etc/sudoers 中的用户才可以运行 sudo 这个命令。

sudo 的运行流程:

+ 当用户运行 sudo 时，系统在 /etc/sudoers 文件中搜寻该用户是否有运行 sudo 的权限
+ 若使用者具有可运行 sudo 的权限后，便让用户 输入自己的密码 来确认
+ 若密码输入成功，便开始进行 sudo 后续接的命令(root 运行 sudo 时，不需要输入密码)
+ 若想切换的身份是运行者身份相同时，也不需要密码。

*** visudo 与 /etc/sudoers

除了 root 以外的其他帐号，若想要使用 sudo 运行属于 root 的权限命令，则 root 需要先使用 visudo 修改 /etc/sudoers,
让改帐号可以使用部分或者全部的 root 权限。visudo 可以检验配置完成后的语法，可以避免配置出错。

*** sudo 搭配 su 的使用方式

#+BEGIN_SRC shell
  User_Alias ADMINS = user1,user2,user3
  ADMINS ALL=(root) /bin/su -
#+END_SRC

使用这个方式，用户可以 利用 sudo su - 的方式，输入自己的密码，然后就变成了 root 的身份，而且 root 密码不会泄漏。

* 使用者的特殊 shell 与 PAM 模块

** 特殊的 shell，/sbin/nologin

使用了这个 shell 的用户即使有了口令，在想要登录时也无法登录。这里的无法登录是指，这个用户无法使用 bash 或者其他 shell 来登录系统。

** PAM(Pluggable Authentication Modules) 模块简介
PAM 可以简单的理解为一套应用程序编程接口，它提供了一系列的验证机制，只要使用者将验证阶段的需求告知 PAM 后，PAM 就能够回报使用者验证的结果。

*** PAM 验证规则
以 passwd 命令为例：

+ 用户开始运行 /usr/bin/passwd 这个程序之后，输入口令
+ passwd 就调用 PAM 模块进行验证
+ PAM 模块会到 /etc/pam.d/找寻与程序(passwd)同名的配置文件
+ 根据 /etc/pam.d/passwd 内的配置，引用相关的PAM 模块逐步进行验证分析
+ 将验证结果(成功、失败及其他信息)回传给 passwd 程序
+ passwd 会根据回传的结果进行下一步的动作。

* Linux 主机上的用户信息传递

如何与同时登录在主机上的用户交谈

** 查询使用者 w,who,last,lastlog

+ w,who 查询目前已登录在系统上的用户。
+ lastlog 查询每个帐号最近登录的时间

** 与当前登录的用户交谈 write,mesg,wall

#+BEGIN_SRC shell
  write 使用者帐号 [用户所在的终端接口]
#+END_SRC

不接收消息(但还是会接收 root 的消息)，如果是 root 这样设置了，那么所有的消息都不能发送到 root。

#+BEGIN_SRC shell
 mesg n
#+END_SRC

#+BEGIN_SRC shell
 mesg y  #解开禁用消息状态
 mesg    #查询当前是否接收消息
#+END_SRC

广播消息

#+BEGIN_SRC shell
  wall "message"
#+END_SRC

** 使用者的邮箱: mail

一个帐号一个信箱。一般在 /var/spool/mail 中。

发邮件:

#+BEGIN_SRC shell
mail user -s "subject"

body...
. # 这个点作为结束的符号

#+END_SRC


收信直接输入 mail 命令。

* 手动增加用户

一般不推荐手动增加用户。

** 一些检查工具

+ pwck 用来检查 /etc/passwd 文件是否输入正确
+ pwconv 将 /etc/passwd 内的帐号与口令，移动到 /etc/shadow 中
+ pwunconv 将 /etc/shadow 内的口令数据写回到 /etc/passwd 中，并且删除 /etc/shadow 文件。
+ chpasswd 读入没有加密的密码，并且在经过加密后，将加密后的密码写入到 /etc/shadow 中



** 特殊帐号，如纯数字帐号的手工创建

不推荐纯数字帐号，因为系统很难区别这是帐号还是 UID。

** 大量创建帐号的模板
  利用脚本来批量的创建用户。

** 大量创建帐号，适用于连续数字，比如学号

同样也是通过脚本来创建。
