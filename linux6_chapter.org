#+title: 第六章、Linux 的文件权限与目录配置
#+author:ray
#+date:<2016-03-09 Wed>

* 使用者和群组


+ 文件拥有者
  Linux 是一个多人多任务系统，因此可能会有多人在这个系统上工作，因为每个用户可能会有自己的独有的文件和隐私，因此
  文件拥有者就变成了一个很重要的概念。
+ 群组
  群组在进行团队开发的时候，就变成的很重要了，因为可能有些资料需要团队成员的共同编辑才能够完善，所以群组就变得很有用了。

  注：每个帐号都可以有多个群组的支持，就是一个帐号可以被加入到多个群组中。
+ 其他人
  其他人就是不属于同一个群组的其他用户，其他人是没有办法访问群组内的文件的，但是有一个特殊的其他的人，就是 root 用户，这个
  用户可以进行全部的操作。
+ Linux 用户身份与群组记录的文件
  默认情况下，所有的帐号信息都是记录在 */etc/passwd* 这个文件下，密码记录在 */etc/shadow* 文件下，所有的组名都记录在
  */etc/group* 文件下。

* Linux 文件权限概念

** Linux文件属性
   进入到任意一个文件里面，使用 ls -al 命令， 然后就可以出现以下的目录：
   [[http://7xi5nj.com1.z0.glb.clouddn.com/chapter6_ls1.jpg]]

   我们可以看到总共有7列，其中没一列的意义如下：

   | 列 | 意义     |
   |----+----------|
   |  1 | 权限     |
   |  2 | 连结     |
   |  3 | 拥有者   |
   |  4 | 群组     |
   |  5 | 文件容量 |
   |  6 | 修改日期 |
   |  7 | 文件名称     |


*** 第一列代表这个文件的类型与权限
    仔细观察，发现其实这一栏总共有十个字符，这个十个字符总共分为4组，第一个字符表示文件的类型，后面9个字符分为三组。

+ 第一个字符的含义：
  第一个字符有多个值，每个值代表着不同的含义：
  | 值 | 意义                               |
  |----+------------------------------------|
  | d  | 表示目录                           |
  | -  | 表示是文件                         |
  | l  | 表示是连结                         |
  | b  | 表示装置文件里面的可存储的接口设备 |
  | c  | 表示装置文件里的串行接口设备                     |

+ 后三组的含义：
  每组的字符(r)表示可读，字符(w)表示可写，字符(x)表示可执行,每组这三个权限的位置不会变，如果没有权限，就会出现-。

  - 第一组表示 文件拥有者的权限

  - 同群组的权限

  - 其他非本群组的权限

*** 第二栏表示有多少档名连结到这个节点(i-node)
    每个文件都会将它的权限与属性记录到文件系统的 i-node 中。

*** 第三栏表示这个文件(或目录)的「拥有者的帐号」

*** 第四栏表示这个文件所属的群组

*** 第五栏表示这个文件的容量大小，单位是 bytes

*** 第六栏表示这个文件的建档日期或者最近的修改日期

*** 第七栏表示这个文件(或者文件夹)的名称
    注：
    + 对于文件，只要有 r 权限，就可以读这个文件。
    + 对与文件夹，必须得有 r+x 权限才能进入到文件夹，只有 r 权限是进不来文件夹的。
*** Linux 文件权限的重要性
    + 系统保护功能，可以将一些很重要的文件保护起来，不能被普通的用户所修改。
    + 团队开发和数据共享功能，可以设置合适的权限来将一些文件分享给其他的人。

** 如何改变文件属性与权限

   以下是最常用来改变文件的权限和群组的：
   + chgrp 改变文件的所属群组
   + chown 改变文件的所有者
   + chmod 改变文件的权限， SUID,SGID,SBIT等等特性。

*** 改变所属群组 chgrp

    要被改变的组名必须在 /etc/group 文件中存在才行，否则改变不了。
    #+BEGIN_SRC shell
      chgrp users test.org
    #+END_SRC


*** 改变文件拥有者 chown
    同理，要改成的那个拥有者必须已经存在于 /etc/passwd 文件中。
    #+BEGIN_SRC shell
       chown lemon test.rog
    #+END_SRC

    如果要将目录下的所有次目录以及文件同时更改文件拥有者的话，可以直接加上 -R 参数:

    #+BEGIN_SRC shell
      chown -R lemon test
    #+END_SRC

    而且这个命令可以直接将群组的名称也修改：
    #+BEGIN_SRC shell
      chown lemon:lemonGroup test.org
    #+END_SRC

*** 改变权限 chmod

**** 数字类型改变文件权限

     每个权限对应的数字如下：

     | 权限      | 值 |
     |-----------+----|
     | r(可读)   |  4 |
     | w(可写)   |  2 |
     | x(可执行) | 1  |

     所以 rwx 的值就是 4 + 2 + 1 = 7,
         r-x 的值就是 4 + 0 + 1 = 5

     #+BEGIN_SRC shell
       chmod [-R] xyz 文件或目录
     #+END_SRC


**** 符号类型改变文件权限
     之前权限所分的三组分别是 user group others三种身份可以由 u , g, o 来分别表示，a则代表 all,表示全部的身份。读写的权限就
     可以写成 r, w, x。另外可以用 +(加入), -(减去), =(设定)等操作符来对权限进行操作，例如 :

     #+BEGIN_SRC shell
       chmod u=rwx,go=rx test.org

       chmod a-x test.org
     #+END_SRC

** 目录和文件的权限的意义

*** 权限对文件的重要性
    在 linux 系统中，文件的不同权限代表着不同的含义，x 权限代表这个可执行，在 linux 系统中，文件能不能执行完全是看这个文件有没有
    x 权限，与文件名称及后缀是没有关系的，但是在 windows 中，一个文件能不能执行是看文件后缀的。同时在 Linux 系统中，拥有 w 权限
    不代表着有删除这个文件的权限。

*** 权限对目录的重要性
    + r 权限
      当对一个目录有 r 权限时，表示可以可以查询该目录下的文件名。
    + w 权限
      w 权限表示可以改变该目录的结构：
      - 建立新的文件与目录
      - 删除已经存在文件和目录(不论该文件的权限是什么)
      - 将已经存在的文件或者目录更名
      - 搬移该目录内的文件、目录的位置
    + x 权限
      目录的 x 权限表示的是用户是否可以进入该目录。

** Linux 文件种类和扩展名
   任何东西在 Linux文件属性下都是文件。

*** 文件种类

    + 常规文件
      权限第一个字符为 [-] 的文件，大致上又可以分为：
      + 纯文本文档(ASCII): Linux 最常见的文本类型，大多数配置文件都是属于这个类型
      + 二进制文件: Linux 中的可执行文件
      + 数据格式文件: 程序运行过程中读取的数据，直接打开会乱码。
    + 目录文件
      权限的第一个属性为 [d]
    + 连结文件
      类似 windows 中的快捷方式，权限的第一个属性为 [l]
    + 设备文件
      与外设及存储相关的一些文件，通常都在 /dev 目录下：
      - 区块(block)设备文件: 硬盘，软盘等,第一个属性为 [b]。
      - 字符(character)设备文件：外设，鼠标，键盘等, 第一个属性为 [c]。
    + 数据接口文件(socket)
      这种类型的文件通常被用于网络上的数据传输， 第一个属性为 [s],通常在 /var/run 这个目录可以看见这类文件。
    + 数据输送文件(FIFO)
      一种特殊的文件类型，用于解决多个程序读取一个文件时所造成的错误。第一个属性为 [p]

*** Linux 文件扩展名
    linux中文件是否可以执行和文件的扩展名没有什么联系，但是依然会用扩展名来表示文件的类型:
    + sh 脚本或者批处理文件，因为是用 shell写成的，所以扩展名就是 sh
    + Z, tar, tar.gz, zip, tgz：经过打包的压缩文件
    + html, php 网页，php文件等等。

*** Linux 文件长度限制
    + 单一文件或者目录的最大文件名为255字符
    + 包含完整路径名称及目录(/)的完整文档名称为4096个字符

*** Linux 文件名限制
    文件名最好避免以下的一些特殊字符：* ? > < ; & ! [ ] | \ ' " ` ( ) { } - +

* Linux 目录配置

** Linux 目录配置的依据--FHS
   FHS(Filesystem Hierarchy Standard) 是一个 Linux 的目录架构的标准，各个 Linux 的发行版都遵循这个标准。这样每个发行版本
   之间在目录架构这块就不会有太大的变化。给用户带来的差异性就不会有这么大。Linux 的目录结构大致可以分成以下的样子：

   |                  | 可分享的(shareable)     | 不可分享的(unshareable) |
   |------------------+-------------------------+-------------------------|
   | 不可变的(static) | /usr (软件安装目录)     | /etc  (配置文件)        |
   |                  | /opt (第三方软件)       | /boot (开机和核心文档)  |
   | 可变的 (variable) | /var/mail(用户邮箱)     | /var/run (程序相关)     |
   |                  | /var/spool/news(新闻组) | /var/lock(程序相关)     |

   + 可分享的：可以分享给其他系统挂载使用的目录，如执行文件，用户的邮件数据等。
   + 不可分享的：机器上运作的配置文件或者与程序有关的 socket 文件等。
   + 不变的: 不会随着发行版的改变而改变，如函数库等。
   + 可变的: 经常会改变的数据，登录文件等。


*** 根目录(/)的意义和内容
    根目录是整个系统最重要的部分，里面保存的都是一些重要的核心文件，与 开机/还原/系统修复 等行为有关。这些文件本身也不大，所以根目录
    的容量应该可能的小。这样里面的文件就会少，发生错误的机率就会小不少。

    根据 FHS 标准，在根目录下应该有如下的目录:

    | 目录   | 应该放置的文件                                                                                       |
    |--------+------------------------------------------------------------------------------------------------------|
    | /bin   | /bin 中放置的是在单人模式下仍然可以被操作的可执行文件, 例如: cat chmod chown date mv mkdir cp bash等 |
    | /boot  | 这个目录主要放置开机会用到的文件。                                                                   |
    | /dev   | linux 中的任何装置和外设都是以文件的形式存在这个目录中                                               |
    | /etc   | 系统主要的配置文件都在这个文件夹内，人员的帐号密码，各种软件的启动文件等                             |
    | /home  | 系统用户的主目录，~ 表示当前用户的 home 目录，~user 表示 user 的home 目录                            |
    | /lib   | 该目录下放置的是开机会用到的函数库                                                                   |
    | /media | 该目录下放置的都是可以移除的设备，例如 软盘，光盘等，软盘，光盘，DVD等都会挂载在这里                 |
    | /mnt   | 挂载额外的设备                                                                                       |
    | /opt   | 安装第三方的软件，例如 KDE 桌面软件等。                                                              |
    | /root  | 系统管理员的 home 目录                                                                               |
    | /sbin  | 开机过程中所需要的可执行文件，包括开机，修复，还原系统等过程所需的可执行文件                         |
    | /srv   | 一些网络程序启动后，这些服务所需要的数据目录                                                         |
    | /tmp   | 一般用户和正在执行的程序暂时存放文件的地方                                                                                |

*** /usr 的意义和内容
    /usr (User Software Resource) 里面放置的是属于可分享的和不可变动的数据。

    | 目录         | 应放置的文件                                                   |
    |--------------+----------------------------------------------------------------|
    | /usr/bin     | 绝大部分的用户可执行文件都在这个目录下                         |
    | /usr/include | c/c++ 等程序的头文件的放置地点                                 |
    | /usr/lib     | 软件的函数库，目标文件，以及一些不常被使用的可执行文件或者脚本 |
    | /usr/local   | 系统管理员自行下载安装的软件                                   |
    | /usr/sbin    | 非系统正常运作所需要的系统指令                                 |
    | /usr/share   | 放置共享文件的地方，大多数是文档，比如联机帮助文档等           |
    | /usr/src     | 放置软件源码                                                         |

*** /var 的意义和内容
    主要放置系统运行过程中所产生文件，例如缓存，程序的 lock file等。

    | 目录       | 放置的内容                                    |
    |------------+-----------------------------------------------|
    | /var/cache | 程序运行过程中产生的暂时性文件                |
    | /var/lib   | 程序运行过程中，需要用到的数据文件放置的目录  |
    | /var/lock  | 某些不能共享的文件上锁后存储的地方            |
    | /var/log   | 登录文件放置的目录                            |
    | /var/mail  | 个人电子邮件的目录                            |
    | /var/run   | 某些程序启动后，会将 pid 文件放置在这个目录下 |
    | /var/spool | 通常放置一些队列数据                                    |

*** 目录树
    每一个 linux 的目录都可以画成一棵目录树。

*** 绝对目录与相对目录
    + 绝对目录: 由根目录(/)开始写起的文件名或目录名称
    + 相对目录：相对与当前目录的文件名写法


*** 查看系统内核和发行版本

    查看内核版本:
    #+BEGIN_SRC shell
       uname -r
    #+END_SRC

    查看系统发行版本:
    #+BEGIN_SRC shell
       lsb_release -a
    #+END_SRC
