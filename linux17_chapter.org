#+title: 第十七章 程序管理与 SELinux 初探
#+author: ray
#+date:<2016-05-04 Wed>

* 什么是进程
在 linux 系统中，触发任何一个事件，系统都会将它定义成一个进程，并且给予这个进程一个 ID，称之为 PID，同时依据启发这个程序的使用者与相关属性关系，
给予这个 PID 一组有效的权限配置。

** 进程与程序

只需要运行一个命令或者一个程序就可以产生一个进程。

+ 程序(program): 通常为 binary program， 放置在存储媒体中，为实体文件的形态存在
+ 进程(progress): 程序被触发之后，运行者的权限与属性、程序的代码与所需的数据都会被加载到内存中，操作系统并给予这个内存内的单元一个识别码(PID),
可以说，程序就是一个正在运行的程序。


*** 子程序与父程序

子程序可以理解为由父程序衍生出来的。例如在登录系统之后，会取得一个 bash 的 shell，然后利用这个 bash 去运行另外一个命令，那些另外的运行的命令
也会被创建成进程，这就产生了子程序，原本的 bash 环境就是父程序了。

*** fork 和 exec: 程序调用的流程

子程序与父程序之间的关系复杂在于程序之间的相互调用，在 Linux 系统中程序之间的项目调用通常称之为 fork-and-exec 流程。新的进程都会由父程序以
复制(fork)的方式产生一个一模一样的子程序被复制出来的子程序再以exec 的方式来运行实际要运行的程序。


*** 系统或网络服务: 常驻内存的程序

这些常驻的程序称之为：服务(deamon)。


** Linux 的多人多工环境

+ 多人环境
+ 多工行为
+ 多重登录环境的七个基本终端窗口
+ 特殊的程序管理行为
+ bash 环境下的工作管理

* 工作管理

在 bash 环境下，在单一终端下同时进行多个工作的行为管理。

** 什么是工作管理

在进行工作管理的行为中，其实每个工作都是目前的 bash 的子程序，也就是彼此之间是有相关性的，无法使用 job control 的方式由 tty1 的环境去管理
tty2 的 bash。

+ 需要管理的程序必须来自于当前自己 shell 的 bash
+ 前景：可以控制与下达命令的这个环境称为前景的工作
+ 背景：可以自行运行的工作，无法使用 ctrl + c 来终止，可以使用 bg/fg 来呼叫改程序
+ 背景中运行的进程不能等待终端的输入


** job control

+ 直接将命令放到背景中运行的 &

+ 将 目前的工作丢到背景中暂停: ctrl + z

+ 观察目前的背景工作状态: jobs

+ 将背景工作拿到前景来处理 fg

+ 让工作在背景下的状态编程运行中: bg

+ 管理背景中的工作: kill


** 离线管理问题

上面所说到的背景运行只是指在终端机模式下可以避免 ctlr +c 终端的一个情景，但是终端关闭之后，所有的背景工作就会停止。

而使用 nohup 这个命令则可以是命令在系统离线或者注销之后还可以继续运行。
