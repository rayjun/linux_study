#+title: 第十七章 程序管理与 SELinux 初探
#+author: ray
#+date:<2016-05-04 Wed>

* 什么是进程
在 linux 系统中，触发任何一个事件，系统都会将它定义成一个进程，并且给予这个进程一个 ID，称之为 PID，同时依据启发这个程序的使用者与相关属性关系，
给予这个 PID 一组有效的权限配置。

** 进程与程序

只需要运行一个命令或者一个程序就可以产生一个进程。

+ 程序(program): 通常为 binary program， 放置在存储媒体中，为实体文件的形态存在
+ 进程(progress): 程序被触发之后，运行者的权限与属性、程序的代码与所需的数据都会被加载到内存中，操作系统并给予这个内存内的单元一个识别码(PID),
可以说，程序就是一个正在运行的程序。


*** 子程序与父程序

子程序可以理解为由父程序衍生出来的。例如在登录系统之后，会取得一个 bash 的 shell，然后利用这个 bash 去运行另外一个命令，那些另外的运行的命令
也会被创建成进程，这就产生了子程序，原本的 bash 环境就是父程序了。

*** fork 和 exec: 程序调用的流程

子程序与父程序之间的关系复杂在于程序之间的相互调用，在 Linux 系统中程序之间的项目调用通常称之为 fork-and-exec 流程。新的进程都会由父程序以
复制(fork)的方式产生一个一模一样的子程序被复制出来的子程序再以exec 的方式来运行实际要运行的程序。


*** 系统或网络服务: 常驻内存的程序

这些常驻的程序称之为：服务(deamon)。


** Linux 的多人多工环境

+ 多人环境
+ 多工行为
+ 多重登录环境的七个基本终端窗口
+ 特殊的程序管理行为
+ bash 环境下的工作管理

* 工作管理

在 bash 环境下，在单一终端下同时进行多个工作的行为管理。

** 什么是工作管理

在进行工作管理的行为中，其实每个工作都是目前的 bash 的子程序，也就是彼此之间是有相关性的，无法使用 job control 的方式由 tty1 的环境去管理
tty2 的 bash。

+ 需要管理的程序必须来自于当前自己 shell 的 bash
+ 前景：可以控制与下达命令的这个环境称为前景的工作
+ 背景：可以自行运行的工作，无法使用 ctrl + c 来终止，可以使用 bg/fg 来呼叫改程序
+ 背景中运行的进程不能等待终端的输入


** job control

+ 直接将命令放到背景中运行的 &

+ 将 目前的工作丢到背景中暂停: ctrl + z

+ 观察目前的背景工作状态: jobs

+ 将背景工作拿到前景来处理 fg

+ 让工作在背景下的状态编程运行中: bg

+ 管理背景中的工作: kill


** 离线管理问题

上面所说到的背景运行只是指在终端机模式下可以避免 ctlr +c 终端的一个情景，但是终端关闭之后，所有的背景工作就会停止。

而使用 nohup 这个命令则可以是命令在系统离线或者注销之后还可以继续运行。

* 进程管理

** 查询进程

+ ps 查询某个时间点的进程的运行情况截取下来
+ 仅观察自己的 bash 的相关进程 ps -l
+ 观察系统所有进程 ps aux


*** top 观察进行运行的动态情况

*** pstree 观察程序之间的相关性


** 进程的管理

进程的管理是通过 signal 去控制进程。


+ kill signal PID
+ killall signal 命令名称


** 程序的运行顺序


+ priority 与 nice 值
+ nice 新运行的命令就给新的 nice 值
+ renice 已存在进程的 nice 重新调整


** 系统资源的观察

+ free 观察内存的使用情况
+ uname 查询系统与核心相关咨询
+ uptime 观察系统启动时间与工作负载
+ netstat 追踪网络或者插槽
+ demsg 分析核心产生的信息
+ vmstat 侦测系统资源变化


* 特殊文本与进程


** 具有 SUID/SGID 权限额命令运行状态


** /proc/* 代表的意义
内存中的文件都会被写入到这个文件夹下面


** 查询已开启的内建或者已运行程序开启的文件

+ fuser 通过文件找出正在使用该文件的程序

+ lsof 列出被程序所开启文件名称

+ pidof 找出某个正在运行的程序的 PID



* SELinux 初探

** 什么是 SELinux

   SELinux 的全称是 Security Enhanced Linux。

+ 最初设计目标：避免资源的误用
+ 传统的文件权限与帐号关系：自主式存储控制，DAC
+ 以政策守则订特定程序的读取特定文件: 委托式存取控制 MAC


** SELinux 的运行模式

SELinux 是通过 MAC 的方式来控制程序。以下是相关的概念：

+ 主体：SELinux 管理的就是进程
+ 目标: 主题程序能否存取的目标资源以便就是文件系统
+ 政策: 由于进程与文件数量庞大，因此 SELinux 会根据某些服务来制定基本的存取安全性政策
+ 安全性文本：主体能不能存取目标除了政策之外，主体与目标的安全性文本必须一致才能达到。
