#+title: 第八章 Linux 磁盘与文件系统管理
#+author:ray
#+date:<2016-03-15 Tue>

* 认识 EXT2 文件系统

  linux 的最传统的文件系统就是 EXT2，文件系统是创建在硬盘上面的。

** 硬盘组成与分割
   里面的内容大多数已经过时，需要更新。
   + 磁盘组成(机械硬盘)
     - 圆形的磁盘(主要记录数据的部分)
     - 机械手臂，与在机械手臂上的磁盘读取头(可擦写磁盘上的数据)
     - 主轴马达。可转动磁盘，让机械手臂的读取头在磁盘上读写数据。

   + 磁盘的物理组成
     - 扇区是最小的物理存储单位，每个扇区为 512 bytes

     - 将扇区组成一个圆，就是磁柱，磁柱是主要的分割槽的最小单位

     - 第一个扇区最为重要，里面有： 主要启动区(MBR)及分割表，其中 MBR 占有446 bytes，分隔个表占有64bytes。

   + 各接口的磁盘在 Linux 中的文件命名分别为:
     - /dev/sd[a-p][1-15]: 为SCSI，SATA,U盘，Flash 闪盘等接口的磁盘文件名

     - /dev/hd[a-d][1-63]: 为 IDE 接口的磁盘文件名

** 文件系统特性

   每个操作系统所配置的属性/权限并不相同，所以对于新硬盘，就要格式化成能被当前的操作系统所识别的操作系统。通常来说，文件系统通常会将权限/属性与
实际的数据放在不同的区块中，权限/属性放置到 inode 中，至于实际数据则放置到 data block 中，另外还会有一个超级区块会记录整个文件系统的整体信息，
包括 inode 与 block 的总量、使用量、剩余量等。

   + superblock: 记录此 filesystem 的整体信息，包括inode/block 的总量，使用量，剩余量，以及文件系统的格式与相关信息等。
   + inode: 记录文件的属性，一个文件占用一个 inode， 同时记录此文件的数据所在的 block 号码。
   + block: 实际记录文件的内容，若文件太大时，会占用多个block。

** Linux 的 EXT2 文件系统(inode)
   EXT2文件系统基本上是区分为多个区块群组，每个区块群组有独立的 inode/block/superblock 模块。文件系统的最前面有一个启动扇区，这个启动
扇区可以安装启动管理程序。

** 与目录树的关系
   目录与文件在 EXT2 中有着不同的记录方法。

   + 目录
     当创建一个目录时， ext2 会分配一个 inode 与至少一块 block 给该目录。其中，inode 记录该目录的相关权限与属性，并可记录分配到的
     那块 block 号码，而 block 则是记录在这个目录下的文件名与该文件名占用的 inode 号码数据。
   + 文件
     当创建一个文件时，ext2 会分配一个inode 与文件大小相同的 block。
   + 目录树读取
     因为文件名是记录在  block 当中的，读取文件就需要经过目录的 inode 与 block，然后才能找到那个待读取文件的 inode 号码，所以文件的
     新增，删除，修改与目录的 w 权限有关。
   + filesystem 大小与磁盘读取性能
     关于 block 块分散影响读取效率的问题，这部分知识已经过时。

** EXT2/EXT3 文件的存取与日志式文件系统的功能
   当创建一个目录或者文件时，会有以下的行为：

   + 先确定用户对于欲新增加文件的目录是否具有 w 和 x 的权限，有的话才能新增
   + 根据 inode bitmap 找到没有使用的 inode 号码，并将新文件的权限/属性写入。
   + 根据 block bitmap 找到没有使用的 block 号码，并将实际的数据写入 block 中，且更新 inode 的 block 指向数据。
   + 将刚刚写入的 inode 与 block 数据同步更新到 inode bitmap 与 block bitmap，并升级 superblock 的内容。

** Linux 文件系统的运行
   + 系统会将常用的文件数据放置到主存储器的缓冲区，以加速文件系统的读/写
   + 可以手动使用 sync 来强迫内存中被改动的数据写回到磁盘中
   + 正常关机时，关机命令会主动调用 sync 来将内存中的数据写回到磁盘中。
   + 若不正常关机，由于数据尚未写回到磁盘内，因此重新启动可能会花很多时间进行磁盘检查，甚至可能导致文件系统损毁(非磁盘损坏)。

** 挂载点的意义
   每个 file system 都有独立的 inode/block/superblock 等信息，这个文件系统要能够链接到目录树才能被我们使用。将文件系统与目录
树结合的动作称之为 挂载。挂载点一定是目录，该目录为进入该文件系统的入口。

** 其他 Linux 支持的文件系统与 VFS
   Linux 系统除了支持 ext2 与 ext3 等文件系统之外，还支持其他很多的文件系统：

   + 传统文件系统： ext2/minix 等文件系统
   + 日志式文件系统： ext3/windows`NTFS deng
   + 网络文件系统： NFS/SMBFS


*** Linux VFS
    VFS(Virtual Filesystem Switch) 会去读取 linux 的 filesystem。 VFS 可以帮助我们管理整个 filesystem，而不用关注整个文件系统
    的细节。

* 文件系统的简单操作

  在简单认识了文件系统后，我们需要能对整个文件系统进行简单的操作，例如查询文件的容量等。

** 磁盘与目录的容量
   查询文件系统的容量及剩余容量与以下的目录有关：
   + df: 列出文件系统的整体磁盘使用量
   + du: 评估文件系统的磁盘使用量(常用在推估目录所占容量)

*** df

    | 参数 | 意义                                                   |
    |------+--------------------------------------------------------|
    | -a   | 列出所有的文件系统，包括系统特有的 /proc 等文件系统    |
    | -k   | 以 KBytes 的容量显示各文件系统                         |
    | -m   | 以 MBytes 的容量显示各文件系统                         |
    | -h   | 以人类较易读的 GBytes MBytes KBytes 等格式自行显示出来 |
    | -H   | 以 M=1000K 取代 M = 102K 的进位方式                    |
    | -T   | 连同该 partition 的 filesystem 名称也列出来            |
    | -i   | 不用硬盘容量，而以 inode 的数量来显示                                 |

*** du

    du 输出查询目录或文件所占的空间，单位是 K。
    | 参数 | 意义                                                       |
    |------+------------------------------------------------------------|
    | -a   | 列出所有文件与目录容量，因为默认仅统计目录底下的文件量而已 |
    | -h   | 以人们较易读的容量格式(G/M)显示                            |
    | -s   | 列出总量而已，而不列出每个目录所占容量                     |
    | -S   | 不包括子目录下的总计，与 -s 有点差别                       |
    | -k   | 以 KBytes 列出容量显示                                     |
    | -m   | 以 MBytes 列出容量显示                                            |

** 实体链接与符号链接  ln

   Linux 底下的链接文件有两类，一类是类似 Windows 的快捷方式的文件，可以快速的链接到目标文件或者目录。另一种则是
   通过文件系统的 inode 链接来产生新的名称(不产生新的文件)，这种称为实体链接。

*** Hard Link(实体链接，硬式链接或者实际链接)
    关于 inode:
    + 每个文件都会占用一个 inode， 文件内容由 inode 的记录来指向
    + 要读取文件，必须经过目录记录文件名来指向正确的 inode 号码才能读取

    也是就是说，文件名只与目录有关，但是文件内容则与 inode 有关。所以可以有多个名称指向同一个 inode，实体链接就是在
    某个目录下新增一个名称链接到某个 inode 号码的关联记录。

    #+BEGIN_SRC shell
       ln passwd passwd-hd # hard link
    #+END_SRC
    注：实体链接不能跨 Filesystem ，以及不能 链接目录。

*** Symbolic Link(符号链接，也就是快捷方式)

    Symbolic link 就是创建一个独立的文件，而这个文件也会让数据指向 它 link 的那个文件名。源文件删除， 链接文件就会打不开。
    #+BEGIN_SRC shell
       ln -s passwd passwd-hd
    #+END_SRC

*** 关于目录的 link 数量

    新创建的目录的 link 数为2，上一级目录的 link 数则会添加 1。
